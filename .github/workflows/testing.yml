name: Test

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - 'v[0-9]*'
  pull_request:
  workflow_call:

jobs:
  unittests:
    runs-on: ubuntu-latest

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      matrix:
        include:
          - python-version: "3.10"
            resolution: "lowest-direct"
          - python-version: 3.13
            resolution: "highest"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install a specific version of uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Make uv use system python
        run: echo "UV_SYSTEM_PYTHON=true" >> $GITHUB_ENV

      - name: Install Packages
        # Install as an editable so that the coverage path is predicable
        run: uv pip install --resolution=${{ matrix.resolution }} -e ".[test]"

      - name: Environment Information
        run: uv pip list

      - name: Run Tests
        run: |
          coverage erase
          make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          name: "py${{ matrix.python-version }}"

  lint-and-format:
    runs-on: ubuntu-latest

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      matrix:
        python-version: [3.13]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install a specific version of uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Make uv use system python
        run: echo "UV_SYSTEM_PYTHON=true" >> $GITHUB_ENV

      - name: Install Linting & Formatting Packages
        run: uv pip install ruff

      - name: Environment Information
        run: uv pip list

      - name: Check lint with ruff
        run: make lint

      - name: Check format with ruff format
        run: make format

  typecheck:
    runs-on: ubuntu-latest

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      matrix:
        python-version: [3.13]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install a specific version of uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Make uv use system python
        run: echo "UV_SYSTEM_PYTHON=true" >> $GITHUB_ENV

      - name: Install Packages
        run: uv pip install ".[extra, typing]"

      - name: Environment Information
        run: uv pip list

      - name: Run Tests
        run: make typecheck

  documentation:
    runs-on: ubuntu-latest

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      matrix:
        python-version: [3.13]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install a specific version of uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Make uv use system python
        run: echo "UV_SYSTEM_PYTHON=true" >> $GITHUB_ENV

      - name: Install Packages
        run: uv pip install -e ".[doc]"

      - name: Environment Information
        run: uv pip list

      - name: Build Documentation
        run: |
          pushd doc
          SPHINXOPTS=-W
          make html && popd
