name: Test

on: [push, pull_request, workflow_call]

jobs:
  unittests:
    runs-on: ubuntu-latest

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      matrix:
        python-version: ["3.8", "3.11"]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Packages
        shell: bash
        run: |
          pip install -e ".[test]"

      - name: Environment Information
        shell: bash
        run: |
          pip list

      - name: Run Tests
        shell: bash
        run: |
          coverage erase
          make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          name: "py${{ matrix.python-version }}"

  lint-and-format:
    runs-on: ubuntu-latest

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Linting & Formatting Packages
        shell: bash
        run: |
          pip install ruff
          pip install black

      - name: Environment Information
        shell: bash
        run: pip list

      - name: Check lint with Ruff
        shell: bash
        run: make lint

      - name: Check format with Black
        shell: bash
        run: make format

  documentation:
    runs-on: ubuntu-latest

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Packages
        shell: bash
        run: |
          pip install -e ".[doc]"

      - name: Environment Information
        shell: bash
        run: pip list

      - name: Build Documentation
        shell: bash
        run: |
          pushd doc
          SPHINXOPTS=-W
          make html && popd

  check_semver_tag:
    needs: [unittests, lint-and-format, documentation]
    runs-on: ubuntu-latest
    outputs:
      tag_type: ${{ steps.check_semver.outputs.tag_type }}
      publish_index: ${{ steps.check_semver.outputs.publish_index }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4

      - name: Check for semantic version tag
        id: check_semver
        run: python tools/gha_check_semver.py

      - name: See outputs
        shell: bash
        run: |
          echo "tag_type=" ${{ steps.check_semver.outputs.tag_type }}
          echo "publish_index=" ${{ steps.check_semver.outputs.publish_index }}

  # Ref: https://github.com/pypa/gh-action-pypi-publish
  publish:
    name: Build and publish Python üêç distributions üì¶ to TestPyPI or PyPI
    runs-on: ubuntu-latest
    needs: [check_semver_tag]
    if: ${{ needs.check_semver_tag.outputs.publish_index != '' }}

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Packages
        run: python -m pip install build

      - name: Build a wheel and a source tarball
        run: make dist

      - name: Publish distribution üì¶ to Test PyPI
        if: ${{ needs.check_semver_tag.outputs.publish_index == 'testpypi' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Publish distribution üì¶ to PyPI
        if: ${{ needs.check_semver_tag.outputs.publish_index == 'pypi' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
